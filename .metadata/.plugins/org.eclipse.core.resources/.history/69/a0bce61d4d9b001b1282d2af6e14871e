package com.day;

public class Note {

	public static void main(String[] args) {

//	String text2 = "helloworld";
//	
//	
//	if (text_f() == text2)
//		System.out.println("두 주소가 같다");
//	else
//		System.out.println("두 주소가 다르다");
//
//	}
//
//	static String text_f() {
//		return new String("helloworld");
//	}
//	
//	static String text = "helloworld";
		
			//적용
			
			int [] arr = {100, 200};
			tostr(arr[0]);   // 이 경우 함수 인자의 n과 arr[0]의 주소는 다름        
			System.out.println(arr[0]);
			tostr(arr);     // 이 경우, 함수 인자의 n과 arr의 주소는 동일
			System.out.println(arr[0]);
			
			
			String[] t_0 = new String[1];    // 참조변수 생성. 여기서 다시 한 번 new의 역할을 상기하면, Heap메모리에 주소를 할당해주고 이 주소를 stack메모리에 있는 변수 t_0(=참조변수)와 연결해준다. 
			t_0[0] = "hello";
			String[] t_1 = new String[1];    // 두 번째 참조변수. 주소가 할당되지만, 실질적으로 다음에 다른 주소를 받기 때문에 이 주소는 미아가 된다. garbege collector가 이러한 주소를 처리. 
			t_1 = t_0;       // 참조타입인 두 배열의 주소가 공유됨. (기존 t_0의 주소를 t_1로 넘긴다.))
			t_1[0] = "revised?";  // t_1의 값을 바꾸면?
			System.out.println(t_0[0]);   // t_0의 값도 바뀐다! 이 것이 바로 참조타입의 특징
		
	}
	
	// 인트 값을 인자로 하는 함수 
	static int tostr(int n) {
		n = 1000;
		return n;
	}
	
	// 배열을 인자로 하는 함수
	static int tostr(int[] n) {
		n[0] = 1;
		return n[0];
	}
	
	
	
	
	
	
	
}
