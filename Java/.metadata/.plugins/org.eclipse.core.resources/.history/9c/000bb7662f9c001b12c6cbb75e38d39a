package com.day;

import java.util.ArrayList;
import java.util.Iterator;

public class Day_0413 {

	public static void main(String[] args) {
		ArrayList<Integer> list = new ArrayList<Integer>();	
		
		// 1 - 10까지 대입
		for (int i = 1; i < 11; i++) {
			list.add(i);
		}
		
		// 숫자 제거 
		
		for (int i = 0; i < list.size()+100; i++) {
			list.remove(0);
		}
		 
		// 결과 확인
		for (int i = 0; i <list.size(); i++) {
			System.out.println(list.get(i));
		}
		
		System.out.println("남은 개수 : " + list.size());
		
		ArrayList<String> string_list = new ArrayList<String>();
		string_list.add("Java");
		string_list.add("Python");
		string_list.add("C");
		
		for (int i = 0; i < string_list.size(); i++) {
			System.out.println(string_list.get(i));
		}
		
	}
	
	static void list_basic() {
		// 리스트 - 기존의 고정 배열의 단점을 보완!! flexible하다. 
		
				ArrayList<Integer> list = new ArrayList<Integer>(); // 크기가 정해져있지 않다. 
				list.add(100); // 추가 및 삭제가 자유롭다.
				list.add(200);
				list.add(300);
				
				System.out.println(list.size()); // 리스트의 크기 출력 
				
				for (int i = 0; i < list.size(); i++) {
					System.out.println(list.get(i));
				}
	}
	
	static void gugu_array() {
		// 2차 배열 사용해서 구구단 구현
		
				// 우선 필요한 숫자들이 들어간 2차 배열을 만들어준다. 
				int[][] num9 = new int[2][]; 
				
				num9[0] = new int[8];
				num9[1] = new int[9];
				
				for (int i = 0; i < num9[0].length; i++) {
					num9[0][i] = i + 2;
				}	
				for (int i = 0; i < num9[1].length; i++) {
					num9[1][i] = i + 1;
				}
				
				
				// 이후 이중 for문을 활용하여 2차배열 안의 각 1차배열간 가진 값들을 곱해 츌력한다. 
				for (int i = 0; i < num9[0].length; i++) {
					for (int j = 0; j < num9[1].length; j++) {
						System.out.printf("%d * %d = %d \n", num9[0][i], num9[1][j], (num9[0][i])*(num9[1][j]));
					}
				}
	}
	
	static void parser() {

		// 문자열에 속한 숫자를 참조하여 출력하기 + parser의 사용!! (중요)

		String text = "hello=1;world=2;test=3;counts=4";
		String[] n_text = text.split(";");
		
		for (int i = 0; i < n_text.length; i++) {
			// 숫자로 parsing 하는 방법

			int n = Integer.parseInt(n_text[i].charAt(n_text[i].length() - 1) + ""); // parser을 통해 문자열을 int 자료형으로 만든다. 이
																						// 때, char to int는 안되므로 끝에 + ""을
																						// 해준다
			int ni = Integer.parseInt(n_text[i].charAt(n_text[i].indexOf("=") + 1) + ""); // indexOf : 특정 문자열에서 정해진 문자열
																							// or char 값의 인덱스를 반환

			System.out.println(ni);

		}
		//

		String mi = "-1";
		int n_mi = Integer.parseInt(mi);
		System.out.println(n_mi + 1);
	}
	
	static void lotto_suffle_sort() {
		// lotto 셔플

		int[] lotto = new int[45];

		for (int i = 0; i < lotto.length; i++) {
			lotto[i] = i + 1;
		}

		for (int i = 0; i < 1000; i++) {
			int r = (int) (Math.random() * 44 + 1);
			int temp = lotto[0];
			lotto[0] = lotto[r];
			lotto[r] = temp;
		}

		// 셔플된 결과 중 위에서 6개만 저장

		int[] lotto6 = new int[6];

		for (int i = 0; i < lotto6.length; i++) {
			lotto6[i] = lotto[i];
		}

		// 셔플된 것 정렬해보자

		for (int i = 0; i < lotto.length; i++) {
			for (int j = i + 1; j < lotto6.length; j++) {
				if (lotto6[i] > lotto6[j]) {
					int temp = lotto6[i];
					lotto6[i] = lotto6[j];
					lotto6[j] = temp;
				}
			}
		}

		for (int i = 0; i < lotto6.length; i++) {
			System.out.println(lotto6[i]);
		}
	}

	static void add_char_to_string() {
		String text = "안녕하세요, 이선구입니다.";

		// 위 문자열의 글자를 char 배열에 한글자 한글자 저장한 후 그 글자들을 다시 가져와서 string으로 만들어보기

		text = text.replace(" ", ""); // 필요없는 빈 문자열을 제거해준다.
		text = text.replace(",", "");
		text = text.replace(".", "");

		char[] ca = text.toCharArray(); // toCharArray : 문자열의 글자 하나하나를 char 배열안에 넣어준다.
		String str = ""; // 빈문자열 만들기

		// 빈 문자열에 char 배열의 요소 하나하나 붙여넣기
		for (int i = 0; i < ca.length; i++) {
			str += ca[i];
		}

		System.out.println(str);
	}

	static void count_char_2() {
		String text = "위키백과는 중립적이고 검증 가능한 자유 콘텐츠 백과사전의 제공을 목적으로 하는 프로젝트로, 누구나 참여하여 문서를 수정하고 발전시킬 수 있습니다."
				+ "위키백과는 중립적이고 검증 가능한 자유 콘텐츠 백과사전의 제공을 목적으로 하는 프로젝트로" + "누구나 참여하여 문서를 수정하고 발전시킬 수 있습니다."
				+ "위키백과는 다섯 가지 기본 원칙에 따라 운영됩니다. " + "모든 문서는 크리에이티브 커먼즈 저작자표시-동일조건변경허락 3.0에 따라 사용할 수 있으며"
				+ "복사, 수정과 배포가 자유롭고 상업적 목적의 사용도 가능합니다.";

		// 위 문자열에서 중복이 있는 글자의 개수를 세어보자 - array 이용

		text = text.replace(" ", ""); // 필요없는 빈 문자열 및 특수문자 제거
		text = text.replace(",", "");
		text = text.replace(".", "");

		char[] ca2 = text.toCharArray(); // toCharArray : 문자열의 글자 하나하나를 char 배열안에 넣어준다
		for (int i = 0; i < ca2.length - 1; i++) {
			for (int j = i + 1; j < ca2.length; j++) {
				if (ca2[i] == ca2[j]) {

					if (ca2[j] == ' ') {
						continue; // 뒤에서 생긴 공백이 나오면 count하지 않고 빠져나감
					}

					System.out.printf("%s\n", ca2[i]);
					ca2[j] = ' '; // 뒤의 중복되는 모든 글자를 공백으로 바꿈으로서, 후에 중복으로 세지 않게 함.

				}
			}
		}
	}

	static void count_char_1() {
		String text = "위키백과는 중립적이고 검증 가능한 자유 콘텐츠 백과사전의 제공을 목적으로 하는 프로젝트로, 누구나 참여하여 문서를 수정하고 발전시킬 수 있습니다."
				+ "위키백과는 중립적이고 검증 가능한 자유 콘텐츠 백과사전의 제공을 목적으로 하는 프로젝트로" + "누구나 참여하여 문서를 수정하고 발전시킬 수 있습니다."
				+ "위키백과는 다섯 가지 기본 원칙에 따라 운영됩니다. " + "모든 문서는 크리에이티브 커먼즈 저작자표시-동일조건변경허락 3.0에 따라 사용할 수 있으며"
				+ "복사, 수정과 배포가 자유롭고 상업적 목적의 사용도 가능합니다.";

		// 위 텍스트에 '다' 와 '위' 라는 글자가 몇개나 있나?

		int count = 0;

		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '다') {
				System.out.println("다 발견");
				count++;
			}

			else if (text.charAt(i) == '위') {
				System.out.println("위 발견");
				count++;
			}
		}
		System.out.println(count);
	}

	static void count_lotto() {
		// 로또 번호 중 중복숫자의 개수 파악하기

		// 로또 번호가 들어있는 배열 만들기(중복값 존재하게)
		int[] lotto = new int[47];
		lotto[0] = 1;
		lotto[46] = 45;

		for (int i = 1; i < lotto.length - 1; i++) {
			lotto[i] = i;
		}

		// 로또 번호 출력
		for (int i = 0; i < lotto.length; i++) {
			System.out.println(lotto[i]);
		}

		// 이중 for문으로 중복 숫자 세기
		int count = 0; // 카운트를 위한 변수 만들어주기
		for (int i = 0; i < lotto.length; i++) {
			for (int j = i + 1; j < lotto.length; j++) {
				if (lotto[i] == lotto[j]) {
					System.out.println("동일한 값 존재");
					count++; // 동일할 때마다 count + 1
				}
			}

		}
		System.out.println(count); // 최종 count 출력
	}
}
